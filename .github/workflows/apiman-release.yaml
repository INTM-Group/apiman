name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      prerelease:
        description: 'Is release candidate or prerelease?'
        type: boolean
        default: false
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Apiman'
    env:
      RELEASE_VERSION: ${{ inputs.release-version }}
      DEV_VERSION: ${{ inputs.snapshot-version }}
      RELEASE_BRANCH: ${{ inputs.branch }}
    steps:
      - name: Initial Git setup
        run: |
          git config --global user.name "apiman-ci"
          git config --global user.email "ci.apiman@gmail.com"

      # Checkout all repositories we're going to use for the release
      - name: Check out Apiman
        uses: actions/checkout@v3
        with:
          repository: apiman/apiman
          ref: ${{ env.RELEASE_BRANCH }}
          lfs: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: 'ossrh'
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Git GPG key setup (keys imported in setup/java)
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          bash .github/workflows/support/set-up-gpg.sh

      # Update all project versions to the version # being released
      - name: Update Apiman *Parent* Release Version ${{ env.RELEASE_VERSION }} in pom.xml
        run: |
          cd parent
          mvn -ntp clean install
          mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp clean install

      - name: Update Apiman Release Version ${{ env.RELEASE_VERSION }} in pom.xml
        run: |
          mvn -ntp -N versions:update-parent -DparentVersion="[$RELEASE_VERSION]" -DgenerateBackupPoms=false
          mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp clean install

      - name: Update Apiman Version in Plugins Project
        run: |
          cd plugins
          sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>$RELEASE_VERSION<\/version.apiman>/g" pom.xml

      - name: Commit & push changes for Apiman ${{ env.RELEASE_VERSION }}
        run: |
          git add .
          git commit -m "Automated commit for Release Version: $RELEASE_VERSION"
          git tag -f -a -m "Tagging release $RELEASE_VERSION" $RELEASE_VERSION
          git push --atomic origin master $RELEASE_VERSION   

      # Create GitHub "release" with attached assets.
      - name: Collecting and signing release assets
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mkdir -p /tmp/releases
          cp containers/docker-compose/target/apiman-distro-docker-compose-$RELEASE_VERSION.zip /tmp/releases/
          cp distro/wildfly/target/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip /tmp/releases/
          cp distro/vertx/target/apiman-distro-vertx-$RELEASE_VERSION.zip /tmp/releases/
          cp distro/tomcat/target/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip /tmp/releases/
          cp api-catalog/catalog.json /tmp/releases/apiman-api-catalog.json
          cp plugins/plugin-registry/target/classes/registry.json /tmp/releases/apiman-plugin-registry.json
          find /tmp/releases -name "*" -exec gpg --batch --passphrase "$GPG_PASSPHRASE" --armor --detach-sign {} \;

      - name: Prepare Asciidoc âž¡ MarkDown for GH Release
        run: |
          npm install --global downdoc
          npx downdoc CHANGELOG.adoc -o /tmp/CHANGELOG.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body_path: /tmp/CHANGELOG.md
          tag_name: ${{ inputs.release-version }}
          name: ${{ inputs.release-version }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            /tmp/releases/*

      # Deploy Apiman to Maven Central.
      # Retry as this command can be moody.
      - name: Deploy Apiman to Maven Central
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: any
          command: |
            cd parent
            mvn deploy -B -DskipTests -Prelease
            
            cd ${{ github.workspace }}
            mvn deploy -B -DskipTests -Prelease

        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Update project pom.xml files to next snapshot version and push to GH
      - name: Update Apiman Parent Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
        run: |
          cd parent
          mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn install

      - name: Update Apiman Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
        run: |
          mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp versions:update-parent -DgenerateBackupPoms=false -DallowSnapshots=true -DparentVersion="[$DEV_VERSION]"
          cd plugins
          sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>$DEV_VERSION<\/version.apiman>/g" pom.xml

      - name: Commit Changes for Apiman Next Snapshot Version ${{ env.DEV_VERSION }}
        run: |
          git commit -am "Automated commit for Next Snapshot Version: $DEV_VERSION"
          git push origin --atomic HEAD:master

  publish-docker-images:
    needs: [release]
    uses: apiman/apiman/.github/workflows/docker-test-release.yml@master
    secrets: inherit
    with:
      apiman-version: ${{ inputs.release-version }}
      push-to-repos: true
      snapshot: ${{ inputs.prerelease == 'true' }}
